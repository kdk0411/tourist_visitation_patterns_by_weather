name: Airflow dag test

on:

  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
    
  workflow_dispatch:
permissions:
  contents: read

jobs:
  build:
    # 실행될 OS 설정
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      # Python 3.8버전으로 설정
      - uses: actions/setup-python@v2
        with:
          python-version: "3.8"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 pytest
          pip install apache-airflow==2.5.1
          pip install pendulum==2.1.2
          pip install -r requirements.txt
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          
      - name: LOAD API Key
        run: |
          echo "AIRFLOW_WEATHER_API_KEY=${{secrets.AIRFLOW_WEATHER_API_KEY}}" >> .env
          echo "AIRFLOW_TOURISM_API_KEY=${{secrets.AIRFLOW_TOURISM_API_KEY}}" >> .env
          echo "AIRFLOW_SLACK_URL=${{secrets.AIRFLOW_SLACK_URL}}" >> .env
          cat .env
        
      - name: airflow setup
        run: |
          airflow db init

      # flake8은 코드를 검사해주는 간편한 모듈임
      - name: Lint with flake8
        run: |
          # Python 파일중에서 문법적 오류가 있는 등의 문제가 있다면 빌드를 취소한다.
          flake8 dags --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero는 모든 오류를 경고로 처리함
          flake8 dags --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
          
      - name: Test DAG
        env:
          AIRFLOW_TOURISM_API_KEY: ${{ secrets.AIRFLOW_TOURISM_API_KEY }}
          AIRFLOW_WEATHER_API_KEY: ${{secrets.AIRFLOW_WEATHER_API_KEY}}
          AIRFLOW_SLACK_URL: ${{secrets.AIRFLOW_SLACK_URL}}
        run: |
          # airflow가 dags 파일을 Dag폴더로 인식하도록 설정
          export AIRFLOW__CORE__DAGS_FOLDER=$(pwd)/dags
          python3 test/test_run.py
